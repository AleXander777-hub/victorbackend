<?php

namespace app\modules\api\controllers;

use dektrium\user\models\RegistrationForm;
use dektrium\user\traits\AjaxValidationTrait;
use dektrium\user\traits\EventTrait;
use Imagine\Image\Box;
use Yii;
use app\models\User;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\imagine\Image;
use yii\rest\Controller;
use yii\web\ForbiddenHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;
use yii\web\UploadedFile;

/**
 * Default controller for the `api` module
 */
class DefaultController extends Controller
{
    use EventTrait;
    use AjaxValidationTrait;

    /**
     * Event is triggered after creating RegistrationForm class.
     * Triggered with \dektrium\user\events\FormEvent.
     */
    const EVENT_BEFORE_REGISTER = 'beforeRegister';

    /**
     * Event is triggered after successful registration.
     * Triggered with \dektrium\user\events\FormEvent.
     */
    const EVENT_AFTER_REGISTER = 'afterRegister';

    /**
     * Event is triggered before connecting user to social account.
     * Triggered with \dektrium\user\events\UserEvent.
     */
    const EVENT_BEFORE_CONNECT = 'beforeConnect';

    /**
     * Event is triggered after connecting user to social account.
     * Triggered with \dektrium\user\events\UserEvent.
     */
    const EVENT_AFTER_CONNECT = 'afterConnect';

    /**
     * Event is triggered before confirming user.
     * Triggered with \dektrium\user\events\UserEvent.
     */
    const EVENT_BEFORE_CONFIRM = 'beforeConfirm';

    /**
     * Event is triggered before confirming user.
     * Triggered with \dektrium\user\events\UserEvent.
     */
    const EVENT_AFTER_CONFIRM = 'afterConfirm';

    /**
     * Event is triggered after creating ResendForm class.
     * Triggered with \dektrium\user\events\FormEvent.
     */
    const EVENT_BEFORE_RESEND = 'beforeResend';

    /**
     * List of allowed domains.
     * Note: Restriction works only for AJAX (using CORS, is not secure).
     *
     * @return array List of domains, that can access to this API
     */
    public static function allowedDomains()
    {
        return [
            // '*',                        // star allows all domains
            'http://export.mysite',
            'http://localhost:3000',
            'http://localhost:3030',
            'http://localhost:3033',
            "http://alex.dmitxe.ru",
            "https://alex.dmitxe.ru",
            "http://alex.dmitxe.ru:3333",
            "https://xn--80ahyfc6d7ba.xn--80aabfyii3adadgocjt5p1b.xn--p1ai",
            "https://xn--80aabfyii3adadgocjt5p1b.xn--p1ai"

            
            
        ];
    }


    public function behaviors()
    {
        $behaviors = parent::behaviors();
        // remove authentication filter
        $auth = $behaviors['authenticator'];
        unset($behaviors['authenticator']);

// add CORS filter
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
            'cors' => [
                'Origin' => self::allowedDomains(),
                //'Access-Control-Allow-Origin' => ['*'],
                'Access-Control-Request-Method' => ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
                'Access-Control-Allow-Credentials' => true,
                'Access-Control-Request-Headers' => ['*'],
            ],
       ];

        $behaviors['authenticator'] = $auth;
//        $behaviors['authenticator']['class'] = HttpBasicAuth::className();
        $behaviors['authenticator']['class'] = CompositeAuth::className();
        $behaviors['authenticator']['only'] = ['index', 'upload'];
        $behaviors['authenticator']['authMethods'] = [
            [
                'class' =>  HttpBasicAuth::className(),
                'auth' => function ($username, $password) {
                    $u = User::findOne([
                        'username' => $username,
                    ]);
                    return (Yii::$app->security->validatePassword($password, $u->password_hash)) ? $u : null;
                }
            ],
            'class' => HttpBearerAuth::className(),
            [
                'class' => QueryParamAuth::className(),
                'tokenParam' => 'access_token'
            ]
        ];
        $behaviors['authenticator']['except'] = ['options'];
        return $behaviors;
    }

    public function beforeAction($action)
    {
        \Yii::$app->user->enableSession = false;
        \Yii::$app->user->enableAutoLogin = false;
        $this->enableCsrfValidation = false;
        Yii::$app->response->format = Response::FORMAT_JSON;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actions()
    {
        return [
            'options' => [
                'class' => 'yii\rest\OptionsAction',
            ],
        ];
    }

    public function actionIndex() {
        if (Yii::$app->user->isGuest) {
            throw new  ForbiddenHttpException('Вы не авторитизированы.');
        }
        $result = [
            'access_token' => Yii::$app->user->identity->access_token,
            'id' => Yii::$app->user->id,
            'roles' => \Yii::$app->authManager->getRolesByUser(Yii::$app->user->id),
        ];
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return $result;
    }

    public function actionUpload($width = 400, $height = 300) {
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        $image = UploadedFile::getInstanceByName('file');
        if (!is_null($image)) {
            $filename = $image->name;
            $path_parts = pathinfo($filename);
            $ext = $path_parts['extension'];
            $filename = Yii::$app->security->generateRandomString(12). '.' . $ext;
            $path = Yii::$app->basePath . '/web/uploads/full/' . $filename;
            $image->saveAs($path);
            $imagine = Image::getImagine();
            $image = $imagine->open($path);
            $image->resize(new Box($width, $height))->save(Yii::$app->basePath . '/web/uploads/thumbs/' . $filename, ['quality' => 70]);
            return ['result' => 'ok', 'name' => $filename, 'full' => '/uploads/full/' . $filename, 'thumb' => '/uploads/thumbs/' . $filename];
        }
        return ['result' => 'fail'];
    }


    /**
     * Displays the registration page.
     * After successful registration if enableConfirmation is enabled shows info message otherwise
     * redirects to home page.
     *
     * @return string
     * @throws \yii\web\HttpException
     */
    public function actionRegister()
    {
        $module = Yii::$app->getModule('user');
        if (!$module->enableRegistration) {
            throw new NotFoundHttpException();
        }

        /** @var RegistrationForm $model */
        $model = \Yii::createObject(RegistrationForm::className());
        $event = $this->getFormEvent($model);

        $this->trigger(self::EVENT_BEFORE_REGISTER, $event);

        $this->performAjaxValidation($model);

        if ($model->load(\Yii::$app->request->post()) && $model->register()) {
            $this->trigger(self::EVENT_AFTER_REGISTER, $event);
            $result = [
                'status' => 'success',
                'title'  => \Yii::t('user', 'Your account has been created'),
            ];
            Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

            return $result;
        }

        $result = [
            'status' => 'fail',
            'model'  => $model->getAttributes(),
            'errors'  => $model->getErrors(),
        ];
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        return $result;
    }


}
