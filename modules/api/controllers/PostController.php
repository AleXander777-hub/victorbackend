<?php

namespace app\modules\api\controllers;

use app\models\Post;
use Yii;
use app\models\User;
use yii\data\ActiveDataProvider;
use yii\filters\auth\CompositeAuth;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\auth\HttpBearerAuth;
use yii\filters\auth\QueryParamAuth;
use yii\rest\ActiveController;
use yii\web\ForbiddenHttpException;

/**
 * Post controller for the `post` table
 */
class PostController extends ActiveController
{
    public $modelClass = 'app\models\Post';

    /**
     * List of allowed domains.
     * Note: Restriction works only for AJAX (using CORS, is not secure).
     *
     * @return array List of domains, that can access to this API
     */
    public static function allowedDomains()
    {
        return [
            // '*',                        // star allows all domains
            'http://export.mystite',
            'http://localhost:3000',
            'http://localhost:3030'
        ];
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        // remove authentication filter
        $auth = $behaviors['authenticator'];
        unset($behaviors['authenticator']);

// add CORS filter
        $behaviors['corsFilter'] = [
            'class' => \yii\filters\Cors::className(),
            'cors' => [
                'Origin' => self::allowedDomains(),
                //'Access-Control-Allow-Origin' => ['*'],
                'Access-Control-Request-Method' => ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
                'Access-Control-Allow-Credentials' => true,
                'Access-Control-Request-Headers' => ['*'],
            ],
        ];


        $behaviors['authenticator'] = $auth;
//        $behaviors['authenticator']['class'] = HttpBasicAuth::className();
        $behaviors['authenticator']['class'] = CompositeAuth::className();
        $behaviors['authenticator']['only'] = ['get-access-token', 'create', 'update', 'delete'];
        $behaviors['authenticator']['authMethods'] = [
            [
                'class' =>  HttpBasicAuth::className(),
                'auth' => function ($username, $password) {
                    $u = User::findOne([
                        'username' => $username,
                    ]);
                    return (Yii::$app->security->validatePassword($password, $u->password_hash)) ? $u : null;
                }
            ],
            'class' => HttpBearerAuth::className(),
            [
                'class' => QueryParamAuth::className(),
                'tokenParam' => 'access_token'
            ]
        ];
        $behaviors['authenticator']['except'] = ['options'];
        return $behaviors;
    }

    public function actions()
    {
        $actions = parent::actions();
        $actions['index']['prepareDataProvider'] = [$this, 'prepareDataProvider'];
        return $actions;
    }

    public function beforeAction($action)
    {
        \Yii::$app->user->enableSession = false;
        \Yii::$app->user->enableAutoLogin = false;
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionGetAccessToken() {
        if (Yii::$app->user->isGuest) {
            throw new  ForbiddenHttpException('Вы не авторитизированы.');
        }
        $result = ['access_token' => Yii::$app->user->identity->access_token];
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
        return $result;
    }

    /**
     * Проверяет права текущего пользователя.
     *
     * Этот метод должен быть переопределен, чтобы проверить, имеет ли текущий пользователь
     * право выполнения указанного действия над указанной моделью данных.
     * Если у пользователя нет доступа, следует выбросить исключение [[ForbiddenHttpException]].
     *
     * @param string $action ID действия, которое надо выполнить
     * @param \yii\base\Model $model модель, к которой нужно получить доступ. Если `null`, это означает, что модель, к которой нужно получить доступ, отсутствует.
     * @param array $params дополнительные параметры
     * @throws ForbiddenHttpException если у пользователя нет доступа
     */
    public function checkAccess($action, $model = null, $params = [])
    {
        // проверить, имеет ли пользователь доступ к $action и $model
        // выбросить ForbiddenHttpException, если доступ следует запретить
        if ($action === 'update' || $action === 'delete') {
            if ($model->author_id !== \Yii::$app->user->id)
                throw new \yii\web\ForbiddenHttpException(sprintf('You can only %s articles that you\'ve created.', $action));
        }
    }

    public function prepareDataProvider()
    {
        $searchModel = new \app\models\PostSearch();
        return $searchModel->search(\Yii::$app->request->queryParams);
    }


    public function actionLogin($email, $password) {
        $user = User::findOne(['email' => $email]);
        if ($user === null) {
            throw new ForbiddenHttpException('Доступ запрещен');
        } else {
            if (Yii::$app->security->validatePassword($password, $user->password_hash)) {
                $result = ['access_token' => Yii::$app->user->identity->access_token];
                Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;
                return $result;
            } else {
                throw new ForbiddenHttpException('Доступ запрещен');
            }
        }
    }

}
